#!/usr/bin/env jruby -E windows-1250

%w{optparse json net/http uri time fileutils}.each { |e| require e }

def parse_options(options = {})
  OptionParser.new do |p|
    p.on("-h", "--hostname HOSTNAME", "hostname") { |v| options[:hostname] = v }
    p.on("-t", "--threads INTEGER", Integer, "number of threads") { |v| options[:threads] = v }
    p.on("-f", "--field-separator PATTERN", String, "field separator") { |v| options[:fs] = v } 
    p.on("-m", "--max-tps FLOAT", Float, "max number of transactions/second") { |v| options[:tps] = v } 
  end.parse!
  options
end

def try_replay_in_parallel(https, lines, n = https.size)
  lines.each_slice(n).each_with_index.map { |e, i| Thread.new { try_replay(https[i], e) }.value }.all?
end

def try_replay(http, lines)
  p13_type, mkt_id, rating_type = 'r', 136750, 'n'
  lines.each do |l|
    backoff_millis = 1000 # initial backoff millis (1000)
    8.times do # max replay attempts (8)
      begin
        dt, uid, title_id, rating = l.split # 2013-06-01T00:00:00.053Z  ur34164904  tt1706601   9
        uid, rating = [uid.delete('^0-9'), rating].map { |e| e.to_i }
        if 0 == rating
          del = '/%s/%s/%s/%s/%s' % [p13_type, mkt_id, uid, rating_type, title_id]
          res = http.request(Net::HTTP::Delete.new(del))
        else
          ms = DateTime.parse(dt).strftime('%Q')
          put = '/%s/%s/%s/%s/%s/%s/%s' % [p13_type, mkt_id, uid, rating_type, title_id, ms, rating]
          res = http.request(Net::HTTP::Put.new(put))
        end
        if res.kind_of? Net::HTTPSuccess
          return true
        else
          puts "Failed to process a line: #{line}", res.body
        end
      rescue
        puts "Failed to process a line: #{line}", $!.inspect, $@
        sleep backoff_millis / 1000.0
        backoff_millis *= 2
        next
      end
    end
  end
end

def fetch_checkpoint_record(argf, ext = File.extname(argf.filename))
  chk_file = argf.filename.chomp(ext) + '.chk'
  if File.exist? chk_file
    chk = open(chk_file) { |f| Marshal.load f }
    chk[1].to_i if File.mtime(argf.filename) <= chk[0]
  end
end

def store_checkpoint_record(argf, ext = File.extname(argf.filename))
  tmp_file = '/tmp/' + File.basename(argf.filename).chomp(ext) + '.tmp'
  chk_file = argf.filename.chomp(ext) + '.chk'
  open(tmp_file, 'w') do |chk|
    Marshal.dump [File.mtime(argf.filename), (argf.lineno + 1).to_s], chk
  end
  FileUtils.mv tmp_file, chk_file, :force => true
end

def between(trans, lines, interval)
  trans % interval + lines.length >= interval
end

def run!
  options = parse_options
  hostname = options[:hostname] || 'p13n-proxy.integ.' + `hostname | rev | cut -d. -f1,2 | rev`.chomp
  max_tps = options[:tps] || 1000 # 22 hours for 80M transactions

  trans = 0
  trans_in_log_interval = 5
  trans_in_chk_interval = 8
  begin_time = Time.now
  https = (options[:threads] || 4).times.map { Net::HTTP.new(hostname) }

  fname = nil
  until ARGF.filename && ARGF.eof? do
    unless ARGF.filename.eql?(fname)
      lineno = fetch_checkpoint_record(ARGF)
      ARGF.gets until lineno.nil? || lineno == ARGF.lineno + 1 || ARGF.eof?
      puts "begins replays at #{ARGF.filename}:#{ARGF.lineno + 1} at #{begin_time}."
      next if ARGF.eof?
      fname = ARGF.filename
    end

    lines = https.reduce([]) { |r, _| 2.times { r << ARGF.gets.chomp unless ARGF.eof? }; r }
    exit -1 unless try_replay_in_parallel(https, lines)
    elapsed_time = Time.now - begin_time
    store_checkpoint_record(ARGF) if between(trans, lines, trans_in_chk_interval)
    puts "@#{ARGF.lineno}/#{'%.2f' % (trans/elapsed_time)} tps: #{lines[-1]}" if between(trans, lines, trans_in_log_interval)
    trans += lines.length
    sleep_second = (trans / max_tps) - elapsed_time
    sleep sleep_second if sleep_second > 0
  end
  store_checkpoint_record(ARGF)
  puts "ends replays at #{ARGF.filename}:#{ARGF.lineno + 1} at #{Time.now}."
end

run! if __FILE__==$0
