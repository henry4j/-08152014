#!/usr/bin/env jruby -E windows-1250

%w{optparse json net/http uri time}.each { |e| require e }

def parse_options(options = {})
  OptionParser.new do |p|
    p.on("-h", "--hostname HOSTNAME", "hostname") { |v| options[:hostname] = v }
    p.on("-t", "--threads INTEGER", Integer, "number of threads") { |v| options[:threads] = v }
    p.on("-f", "--field-separator PATTERN", String, "field separator") { |v| options[:fs] = v } 
    p.on("-m", "--max-tps FLOAT", Float, "max number of transactions/second") { |v| options[:tps] = v } 
  end.parse!
  options
end

def run!
  options = parse_options
  hostname = options[:hostname] || 'p13n-proxy.integ.' + `hostname | rev | cut -d. -f1,2 | rev`.chomp
  max_tps = options[:tps] || 1000 # 22 hours for 80M transactions
  p13_type, mkt_id, rating_type = 'r', 136750, 'n'

  trans = 0
  begin_time = Time.now
  http = Net::HTTP.new(hostname)
  ARGF.each do |e| 
    dt, uid, title_id, rating = e.chomp.split # 2013-06-01T00:00:00.053Z  ur34164904  tt1706601   9
    uid = uid[2..-1].to_i # ur00164904
    if 0 == rating = rating.to_i
      del = '/%s/%s/%s/%s/%s' % [p13_type, mkt_id, uid, rating_type, title_id]
      res = http.request(Net::HTTP::Delete.new(del))
      print '.'
    else
      ms = DateTime.parse(dt).strftime('%Q')
      put = '/%s/%s/%s/%s/%s/%s/%s' % [p13_type, mkt_id, uid, rating_type, title_id, ms, rating]
      res = http.request(Net::HTTP::Put.new(put))
      print '.'
    end
    elapsed_time = Time.now - begin_time
    trans += 1
    sleep_second = (trans / max_tps) - elapsed_time
    sleep sleep_second if sleep_second > 0
  end
end

run! if __FILE__==$0
